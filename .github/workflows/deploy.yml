name: Deploy to EC2

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci --production
    
    - name: Deploy to EC2
      env:
        HOST: ${{ secrets.EC2_HOST }}
        USERNAME: ${{ secrets.EC2_USERNAME }}
        KEY: ${{ secrets.EC2_SSH_KEY }}
        PORT: ${{ secrets.EC2_SSH_PORT }}
      run: |
        echo "$KEY" > private_key
        chmod 600 private_key
        
        # Create deployment directory on EC2 if it doesn't exist
        ssh -o StrictHostKeyChecking=no -i private_key -p ${PORT:-22} ${USERNAME}@${HOST} "mkdir -p ~/pjn-api"
        
        # Sync files to EC2 (excluding unnecessary files)
        rsync -avz --delete \
          --exclude 'node_modules' \
          --exclude '.git' \
          --exclude '.env' \
          --exclude 'private_key' \
          --exclude '.github' \
          --exclude 'logs' \
          --exclude '*.log' \
          -e "ssh -o StrictHostKeyChecking=no -i private_key -p ${PORT:-22}" \
          ./ ${USERNAME}@${HOST}:~/pjn-api/
        
        # Run deployment commands on EC2
        ssh -o StrictHostKeyChecking=no -i private_key -p ${PORT:-22} ${USERNAME}@${HOST} << 'ENDSSH'
          cd ~/pjn-api
          
          echo "üîç Finding Node.js and PM2 paths..."
          # Find the actual paths as root
          NODE_PATH=$(sudo -s which node 2>/dev/null || echo "")
          NPM_PATH=$(sudo -s which npm 2>/dev/null || echo "")
          PM2_PATH=$(sudo -s which pm2 2>/dev/null || echo "")
          
          echo "Node path: ${NODE_PATH:-not found}"
          echo "NPM path: ${NPM_PATH:-not found}"
          echo "PM2 path: ${PM2_PATH:-not found}"
          
          # If paths are empty, try common locations
          if [ -z "$NPM_PATH" ]; then
            if [ -f "/usr/bin/npm" ]; then
              NPM_PATH="/usr/bin/npm"
            elif [ -f "/usr/local/bin/npm" ]; then
              NPM_PATH="/usr/local/bin/npm"
            fi
          fi
          
          if [ -z "$PM2_PATH" ]; then
            if [ -f "/usr/bin/pm2" ]; then
              PM2_PATH="/usr/bin/pm2"
            elif [ -f "/usr/local/bin/pm2" ]; then
              PM2_PATH="/usr/local/bin/pm2"
            fi
          fi
          
          # Check if we found the binaries
          if [ -z "$NPM_PATH" ]; then
            echo "‚ùå Error: npm not found!"
            echo "Try running: sudo which npm"
            exit 1
          fi
          
          echo "üì¶ Installing dependencies..."
          sudo $NPM_PATH ci --production
          
          echo "üîÑ Reloading PM2 application..."
          if [ -n "$PM2_PATH" ]; then
            sudo $PM2_PATH reload ecosystem.config.js --env production
            sudo $PM2_PATH save
            
            echo "üìä PM2 Status:"
            sudo $PM2_PATH status
            
            echo "üìã Application logs (last 20 lines):"
            sudo $PM2_PATH logs 'pjn/api' --lines 20 --nostream || true
          else
            echo "‚ö†Ô∏è  PM2 not found, trying to install it..."
            sudo $NPM_PATH install -g pm2
            PM2_PATH=$(sudo -s which pm2 2>/dev/null || echo "/usr/bin/pm2")
            sudo $PM2_PATH reload ecosystem.config.js --env production
          fi
        ENDSSH
        
        # Clean up
        rm -f private_key
    
    - name: Health Check
      env:
        HOST: ${{ secrets.EC2_HOST }}
        APP_PORT: ${{ secrets.APP_PORT }}
      run: |
        echo "Waiting for application to start..."
        sleep 10
        
        # Check if the API is responding
        MAX_ATTEMPTS=30
        ATTEMPT=0
        
        while [ $ATTEMPT -lt $MAX_ATTEMPTS ]; do
          if curl -f -s -o /dev/null "http://${HOST}:${APP_PORT:-8083}/api/test" || curl -f -s -o /dev/null "http://${HOST}:${APP_PORT:-8083}/api/causas/test"; then
            echo "‚úÖ Application is running successfully!"
            exit 0
          fi
          
          ATTEMPT=$((ATTEMPT + 1))
          echo "Attempt $ATTEMPT/$MAX_ATTEMPTS - Application not ready yet..."
          sleep 2
        done
        
        echo "‚ùå Application failed to start or respond"
        exit 1