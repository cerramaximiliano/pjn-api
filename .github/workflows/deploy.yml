name: Deploy to EC2

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci --production
    
    - name: Deploy to EC2
      env:
        HOST: ${{ secrets.EC2_HOST }}
        USERNAME: ${{ secrets.EC2_USERNAME }}
        KEY: ${{ secrets.EC2_SSH_KEY }}
        PORT: ${{ secrets.EC2_SSH_PORT }}
      run: |
        echo "$KEY" > private_key
        chmod 600 private_key
        
        # Create deployment directory on EC2 if it doesn't exist
        ssh -o StrictHostKeyChecking=no -i private_key -p ${PORT:-22} ${USERNAME}@${HOST} "mkdir -p ~/pjn-api"
        
        # Sync files to EC2 (excluding unnecessary files)
        rsync -avz --delete \
          --exclude 'node_modules' \
          --exclude '.git' \
          --exclude '.env' \
          --exclude 'private_key' \
          --exclude '.github' \
          --exclude 'logs' \
          --exclude '*.log' \
          -e "ssh -o StrictHostKeyChecking=no -i private_key -p ${PORT:-22}" \
          ./ ${USERNAME}@${HOST}:~/pjn-api/
        
        # Create deployment script on the server
        ssh -o StrictHostKeyChecking=no -i private_key -p ${PORT:-22} ${USERNAME}@${HOST} << 'ENDSSH'
          cat > /tmp/deploy_pjn_api.sh << 'DEPLOY_SCRIPT'
#!/bin/bash
cd /home/ubuntu/pjn-api

echo "📦 Installing dependencies..."
npm ci --production

echo "🔄 Reloading PM2 application..."
pm2 reload ecosystem.config.js --env production || pm2 start ecosystem.config.js --env production
pm2 save

echo "📊 PM2 Status:"
pm2 status

echo "📋 Application logs (last 20 lines):"
pm2 logs 'pjn/api' --lines 20 --nostream || true

echo "✅ Deployment completed!"
DEPLOY_SCRIPT

          chmod +x /tmp/deploy_pjn_api.sh
          
          # Execute the script as root
          echo "🚀 Running deployment script as root..."
          sudo bash -l /tmp/deploy_pjn_api.sh
          
          # Clean up
          rm -f /tmp/deploy_pjn_api.sh
        ENDSSH
        
        # Clean up
        rm -f private_key
    
    - name: Health Check via SSH
      env:
        HOST: ${{ secrets.EC2_HOST }}
        USERNAME: ${{ secrets.EC2_USERNAME }}
        KEY: ${{ secrets.EC2_SSH_KEY }}
        SSH_PORT: ${{ secrets.EC2_SSH_PORT }}
      run: |
        echo "🔍 Checking application status via SSH..."
        
        # Setup SSH key
        echo "$KEY" > private_key_health
        chmod 600 private_key_health
        
        # Create health check script on the server
        ssh -o StrictHostKeyChecking=no -i private_key_health -p ${SSH_PORT:-22} ${USERNAME}@${HOST} << 'ENDSSH'
          cat > /tmp/health_check_pjn.sh << 'HEALTH_SCRIPT'
#!/bin/bash
echo "📊 PM2 Status:"
pm2 status

echo ""
echo "🔍 Checking pjn/api process:"
if pm2 status | grep -q 'pjn/api.*online'; then
  echo "✅ Application is running!"
  
  echo ""
  echo "📋 Recent logs:"
  pm2 logs 'pjn/api' --lines 10 --nostream || true
  
  exit 0
else
  echo "❌ Application is not running or not in 'online' status"
  
  echo ""
  echo "📋 Error logs:"
  pm2 logs 'pjn/api' --lines 20 --nostream || true
  
  # Show more debugging info
  echo ""
  echo "🔍 Debugging info:"
  echo "Current user: $(whoami)"
  echo "PM2 location: $(which pm2 || echo 'not found in PATH')"
  echo "Node location: $(which node || echo 'not found in PATH')"
  echo "PATH: $PATH"
  
  exit 1
fi
HEALTH_SCRIPT

          chmod +x /tmp/health_check_pjn.sh
          
          # Execute the health check as root
          echo "🏥 Running health check as root..."
          sudo bash -l /tmp/health_check_pjn.sh
          RESULT=$?
          
          # Clean up
          rm -f /tmp/health_check_pjn.sh
          
          exit $RESULT
        ENDSSH
        
        # Clean up
        rm -f private_key_health