name: Deploy to EC2

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci --production
    
    - name: Deploy to EC2
      env:
        HOST: ${{ secrets.EC2_HOST }}
        USERNAME: ${{ secrets.EC2_USERNAME }}
        KEY: ${{ secrets.EC2_SSH_KEY }}
        PORT: ${{ secrets.EC2_SSH_PORT }}
      run: |
        echo "$KEY" > private_key
        chmod 600 private_key
        
        # Create deployment directory on EC2 if it doesn't exist
        ssh -o StrictHostKeyChecking=no -i private_key -p ${PORT:-22} ${USERNAME}@${HOST} "mkdir -p ~/pjn-api"
        
        # Sync files to EC2 (excluding unnecessary files)
        rsync -avz --delete \
          --exclude 'node_modules' \
          --exclude '.git' \
          --exclude '.env' \
          --exclude 'private_key' \
          --exclude '.github' \
          --exclude 'logs' \
          --exclude '*.log' \
          -e "ssh -o StrictHostKeyChecking=no -i private_key -p ${PORT:-22}" \
          ./ ${USERNAME}@${HOST}:~/pjn-api/
        
        # Run deployment commands on EC2
        ssh -o StrictHostKeyChecking=no -i private_key -p ${PORT:-22} ${USERNAME}@${HOST} << 'ENDSSH'
          # Add common Node.js paths
          export PATH="/usr/local/bin:/usr/bin:/bin:$PATH"
          
          # Check for node/npm in common locations
          if [ -f /usr/bin/node ]; then
            export PATH="/usr/bin:$PATH"
          fi
          
          # Try to source .bashrc or .profile for PATH
          if [ -f ~/.bashrc ]; then
            source ~/.bashrc
          elif [ -f ~/.profile ]; then
            source ~/.profile
          fi
          
          cd ~/pjn-api
          
          # Check if npm is available
          if ! command -v npm &> /dev/null; then
            echo "Error: npm not found in PATH"
            echo "Current PATH: $PATH"
            echo "Trying to find npm..."
            find /usr -name npm -type f 2>/dev/null | head -5
            exit 1
          fi
          
          # Install dependencies
          npm ci --production
          
          # Check for PM2
          PM2_CMD=""
          if command -v pm2 &> /dev/null; then
            PM2_CMD="pm2"
          elif sudo -n command -v pm2 &> /dev/null 2>&1; then
            PM2_CMD="sudo pm2"
          else
            # Try to find PM2 in common locations
            if [ -f /usr/local/bin/pm2 ]; then
              PM2_CMD="/usr/local/bin/pm2"
            elif [ -f /usr/bin/pm2 ]; then
              PM2_CMD="/usr/bin/pm2"
            elif sudo -n test -f /usr/local/bin/pm2 2>&1; then
              PM2_CMD="sudo /usr/local/bin/pm2"
            else
              echo "Error: PM2 not found. Installing PM2..."
              sudo npm install -g pm2
              PM2_CMD="sudo pm2"
            fi
          fi
          
          # Reload PM2 with the ecosystem config
          echo "Using PM2 command: $PM2_CMD"
          $PM2_CMD reload ecosystem.config.js --env production
          $PM2_CMD save
          $PM2_CMD status
        ENDSSH
        
        # Clean up
        rm -f private_key
    
    - name: Health Check
      env:
        HOST: ${{ secrets.EC2_HOST }}
        APP_PORT: ${{ secrets.APP_PORT }}
      run: |
        echo "Waiting for application to start..."
        sleep 10
        
        # Check if the API is responding
        MAX_ATTEMPTS=30
        ATTEMPT=0
        
        while [ $ATTEMPT -lt $MAX_ATTEMPTS ]; do
          if curl -f -s -o /dev/null "http://${HOST}:${APP_PORT:-8083}/api/test" || curl -f -s -o /dev/null "http://${HOST}:${APP_PORT:-8083}/api/causas/test"; then
            echo "✅ Application is running successfully!"
            exit 0
          fi
          
          ATTEMPT=$((ATTEMPT + 1))
          echo "Attempt $ATTEMPT/$MAX_ATTEMPTS - Application not ready yet..."
          sleep 2
        done
        
        echo "❌ Application failed to start or respond"
        exit 1